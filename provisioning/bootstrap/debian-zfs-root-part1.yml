---
- hosts: bootstrap
  become: true
  collections:
    - community.general.zfs
  tasks:
    - stat:
        path: "/usr/local/sbin/chroot_{{ inventory_hostname_short }}"
      register: chroot_wrapper

    - meta: end_play
      when: chroot_wrapper.stat.exists

    - shell: uname -r
      register: kernel_release

    - name: Install ZFS in the Live CD environment
      apt:
        update_cache: true
        package:
          - debootstrap
          - gdisk
          - dkms
          - dpkg-dev
          - "linux-headers-{{ kernel_release.stdout }}"
          - zfs-dkms

    - name: Ensure the ZFS module is loaded
      community.general.modprobe:
        name: zfs
        state: present

    - apt:
        name: zfsutils-linux
        state: present

    - shell: "sgdisk -a1 -n1:24K:+1000K -t1:EF02 {{ item }}"
      args:
        creates: "{{ item }}-part1"
      loop: "{{ zpool_disk_identifiers }}"
      when: system_boot_type == 'bios'

    - shell: "sgdisk -n2:1M:+512M -t2:EF00 {{ item }}"
      args:
        creates: "{{ item }}-part2"
      loop: "{{ zpool_disk_identifiers }}"
      when: system_boot_type == 'uefi'

    - shell: "sgdisk -n3:0:+1G -t3:BF01 {{ item }}"
      args:
        creates: "{{ item }}-part3"
      loop: "{{ zpool_disk_identifiers }}"

    - shell: "sgdisk -n4:0:0 -t4:BF00 {{ item }}"
      args:
        creates: "{{ item }}-part4"
      loop: "{{ zpool_disk_identifiers }}"

    - shell: zpool status bpool
      ignore_errors: true
      register: bpool_status

    - name: Create the boot pool
      shell: >-
        zpool create
        -o cachefile=/etc/zfs/zpool.cache
        -o ashift=12 -d
        -o feature@async_destroy=enabled
        -o feature@bookmarks=enabled
        -o feature@embedded_data=enabled
        -o feature@empty_bpobj=enabled
        -o feature@enabled_txg=enabled
        -o feature@extensible_dataset=enabled
        -o feature@filesystem_limits=enabled
        -o feature@hole_birth=enabled
        -o feature@large_blocks=enabled
        -o feature@lz4_compress=enabled
        -o feature@spacemap_histogram=enabled
        -o feature@zpool_checkpoint=enabled
        -O acltype=posixacl -O canmount=off -O compression=lz4
        -O devices=off -O normalization=formD -O relatime=on -O xattr=sa
        -O mountpoint=/boot -R /mnt
        -f
        bpool{{ ' ' ~ zpool_type if zpool_type != 'single' }}
        {{ zpool_disk_identifiers | product(['-part3']) | map('join') | list | join(' ') }}
      when: bpool_status.rc == 1 #'

    - shell: zpool status rpool
      ignore_errors: true
      register: rpool_status

    - pause:
        prompt: Enter passphrase to encrypt rpool with
        echo: no
      register: rpool_passphrase
      when: zpool_encrypt_root and rpool_status.rc == 1

    - pause:
        prompt: Confirm passphrase
        echo: no
      register: rpool_passphrase_confirm
      when: zpool_encrypt_root and rpool_status.rc == 1

    - fail:
        msg: Passphrases do not match!
      when: zpool_encrypt_root and rpool_status.rc == 1 and (rpool_passphrase.user_input != rpool_passphrase_confirm.user_input)

    - name: Create the root pool
      shell: >-
        {% if zpool_encrypt_root %}echo "{{ rpool_passphrase.user_input }}" | {% endif %}zpool create
        -o ashift=12
        {% if zpool_encrypt_root %}
        -O encryption=aes-256-gcm
        -O keylocation=prompt -O keyformat=passphrase
        {% endif %}
        -O acltype=posixacl -O canmount=off -O compression=lz4
        -O dnodesize=auto -O relatime=on
        -O xattr=sa -O mountpoint=/ -R /mnt
        -f
        rpool{{ ' ' ~ zpool_type if zpool_type != 'single' }}
        {{ zpool_disk_identifiers | product(['-part4']) | map('join') | list | join(' ') }}
      when: rpool_status.rc == 1 #'

    - name: Create ZFS container datasets
      zfs:
        name: "{{ item }}"
        state: present
        extra_zfs_properties:
          canmount: off
          mountpoint: none
      loop:
        - rpool/root
        - bpool/boot

    - shell: zfs get mounted -H -o value rpool/root/debian
      register: rpool_root_debian_mounted
      ignore_errors: true

    - name: Create root filesystem ZFS dataset
      zfs:
        name: rpool/root/debian
        state: present
        extra_zfs_properties:
          canmount: noauto
          mountpoint: /
      when: rpool_root_debian_mounted.stdout != 'yes'

    - name: Mount the root filesystem
      shell: zfs mount rpool/root/debian
      when: rpool_root_debian_mounted.stdout != 'yes'

    - name: Create boot filesystem ZFS dataset
      zfs:
        name: bpool/boot/debian
        state: present
        extra_zfs_properties:
          mountpoint: /boot

    - name: Create datasets
      zfs:
        name: "{{ item.name }}"
        state: present
        extra_zfs_properties: "{{ item.extra_zfs_properties | default(omit) }}"
      loop:
        - name: rpool/home
        - name: rpool/home/root
          extra_zfs_properties:
            mountpoint: /root
        - name: rpool/var
          extra_zfs_properties:
            canmount: off
        - name: rpool/var/lib
          extra_zfs_properties:
            canmount: off
        - name: rpool/var/log
        - name: rpool/var/spool
        - name: rpool/var/cache
          extra_zfs_properties:
            "com.sun:auto-snapshot": false
        - name: rpool/var/tmp
          extra_zfs_properties:
            "com.sun:auto-snapshot": false
        - name: rpool/opt
        - name: rpool/usr
          extra_zfs_properties:
            canmount: off
        - name: rpool/usr/local
        - name: rpool/var/mail
        - name: rpool/tmp
          extra_zfs_properties:
            "com.sun:auto-snapshot": false

    - name: Set directory permissions
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
      loop:
        - path: /mnt/root
          mode: 700
        - path: /mnt/var/tmp
          mode: 1777
        - path: /mnt/tmp
          mode: 1777

    - file:
        path: /mnt/run
        state: directory

    - name: Mount a tmpfs at /run
      shell: mount -t tmpfs tmpfs /mnt/run
      args:
        creates: /mnt/run

    - file:
        path: /mnt/run/lock
        state: directory

    - name: Install the minimal system
      shell: debootstrap bullseye /mnt
      args:
        creates: /mnt/etc/debian_version

    - file:
        path: /mnt/etc/zfs
        state: directory

    - name: Copy in the zpool cache
      copy:
        src: /etc/zfs/zpool.cache
        dest: /mnt/etc/zfs/
        remote_src: true

    # @TODO properly set hostname with fqdqn
    # https://unix.stackexchange.com/questions/322883/how-to-correctly-set-hostname-and-domain-name

    - name: Set the system hostname
      copy:
        content: "{{ system_hostname }}\n"
        dest: /mnt/etc/hostname

    - name: Add a /etc/host entry
      lineinfile:
        path: /etc/hosts
        line: "127.0.1.1       {{ system_hostname }}"

    # @TODO make networking configurable when i add the iscsi stuff
    - name: Configure networking
      copy:
        content: |
          auto {{ ansible_default_ipv4.alias }}
          iface {{ ansible_default_ipv4.alias }} inet static
            address {{ ansible_default_ipv4.address }}
            network {{ ansible_default_ipv4.network }}
            netmask {{ ansible_default_ipv4.netmask }}
            broadcast {{ ansible_default_ipv4.broadcast }}
            gateway {{ ansible_default_ipv4.gateway }}
            dns-nameservers {{ ansible_default_ipv4.gateway }}
        dest: "/mnt/etc/network/interfaces.d/{{ ansible_default_ipv4.alias }}"

    - name: Configure networking (iSCSI boot)
      copy:
        content: |
          auto {{ iscsi_interface_name }}
          iface {{ iscsi_interface_name }}
            pre-up /usr/sbin/ip link set {{ iscsi_interface_name }} mtu 9000
        dest: "/mnt/etc/network/interfaces.d/{{ iscsi_interface_name }}"
      when: iscsi_boot == true

    - file:
        path: /mnt/etc/apt/sources.list
        state: absent

    - name: Configure apt repositories
      lineinfile:
        path: /mnt/etc/apt/sources.list
        line: "{{ item }}"
        create: true
      loop:
        - deb http://deb.debian.org/debian bullseye main contrib
        - deb-src http://deb.debian.org/debian bullseye main contrib
        - deb http://security.debian.org/debian-security bullseye-security main contrib
        - deb-src http://security.debian.org/debian-security bullseye-security main contrib
        - deb http://deb.debian.org/debian bullseye-updates main contrib
        - deb-src http://deb.debian.org/debian bullseye-updates main contrib

    - name: Bind the virtual filesystems from the Live CD environemt to the new system
      shell: "mount --rbind {{ item.src }} {{ item.dest }}"
      args:
        creates: "{{ item.creates }}"
      loop:
        - src: /dev
          dest: /mnt/dev
          creates: /mnt/dev/zfs
        - src: /proc
          dest: /mnt/proc
          creates: /mnt/proc/cpuinfo
        - src: /sys
          dest: /mnt/sys
          creates: /mnt/sys/kernel

    - name: Install python3 in the chroot
      shell: |
        chroot /mnt sh -c "apt-get update && apt-get install --yes python3"
      args:
        creates: /mnt/usr/bin/python3

    - name: Create the chroot wrapper
      copy:
        dest: "/usr/local/sbin/chroot_{{ inventory_hostname_short }}"
        mode: 0755
        content: |
          #!/bin/sh -e
          exec chroot /mnt /usr/bin/python3 "$@"
