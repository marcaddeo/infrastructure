---
- hosts: servers
  become: true
  collections:
    - devsec.hardening
  roles:
    - os_hardening
    - ssh_hardening
    - oefenweb.fail2ban
    - role: dell-omsa
      when: install_dell_omsa is defined and install_dell_omsa
    - role: plymouth
      when: install_plymouth is defined and install_plymouth
    - geerlingguy.firewall
    - geerlingguy.ntp
    - oefenweb.postfix
    - jnv.unattended-upgrades
    - role: ntd.nut
      when: "'physical_servers' in group_names"
    - role: zfs
  tasks:
    - name: Ensure ZFS snapshots are taken before unattended upgrades are performed
      blockinfile:
        path: /usr/lib/apt/apt.systemd.daily
        insertbefore: '# auto upgrade all upgradeable packages'
        block: |
          # Take snapshots before running unattended upgrades.
          zfs snapshot rpool/root/debian@unattended-$(date +%s)
          zfs snapshot bpool/boot/debian@unattended-$(date +%s)
          # Clean up old snapshots, keeping the 3 most recent.
          zfs list -t snapshot -o name -S creation | grep ^rpool/root/debian@unattended | tail -n +4 | xargs -r -n 1 zfs destroy -vr
          zfs list -t snapshot -o name -S creation | grep ^bpool/boot/debian@unattended | tail -n +4 | xargs -r -n 1 zfs destroy -vr

    - name: Ensure user home directory zfs datasets exist
      zfs:
        name: "rpool/home/{{ item.name }}"
        state: present
      loop: "{{ server_users }}"
      no_log: true

    - name: Ensure users exist
      user:
        name: "{{ item.name }}"
        groups: "{{ item.groups }}"
        password: "{{ item.password | password_hash('sha512', 'salt') }}"
        shell: /bin/bash
      loop: "{{ server_users }}"
      no_log: true

    - name: Ensure user home directories have been skeletonized
      copy:
        src: /etc/skel/.
        dest: "/home/{{ item.name }}"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        remote_src: true
        force: false
      loop: "{{ server_users }}"
      no_log: true

    - name: Ensure users ssh keys have been added to authorized_keys
      authorized_key:
        user: "{{ item.name }}"
        key: "{{ lookup('file', item.ssh_public_key_file) }}"
        state: present
      loop: "{{ server_users }}"
      when: item.ssh_public_key_file is defined
      no_log: true

    - name: Ensure the sudo group allows passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        regexp: "^%sudo   ALL=(ALL:ALL) ALL$"
        line: "%sudo   ALL=(ALL:ALL) NOPASSWD: ALL"

    - name: Ensure the server hostname is set
      lineinfile:
        path: /etc/hostname
        regexp: "{{ server_hostname }}\n"
        line: "{{ server_hostname }}\n"

    - name: Ensure the servers hostname/fqdn are in /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: |
          {% if server_fqdn != '' -%}
            {{ ansible_default_ipv4.address }}       {{ server_fqdn }} {{ server_hostname }}
          {% else -%}
            127.0.1.1       {{ server_hostname }}
          {% endif %}
        line: |
          {% if server_fqdn != '' -%}
            {{ ansible_default_ipv4.address }}       {{ server_fqdn }} {{ server_hostname }}
          {% else -%}
            127.0.1.1       {{ server_hostname }}
          {% endif %}
