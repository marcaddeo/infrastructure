---
# ZFS properties that can only be set on creation.
zfs_readonly_properties:
  - casesensitivity
  - normalization
  - utf8only

# Custom ZFS properties used to add functionality via this role.
zfs_custom_properties:
  - shareiscsi

# Valid frequencies to scrub a pool.
zfs_scrub_frequencies:
  - minutely
  - hourly
  - daily
  - monthly
  - weekly
  - yearly
  - quarterly
  - semiannually

# ZFS Kernel parameters to set.
#
# Example:
#
# zfs_kernel_module_parameters:
#   zfs_arc_max: 30064771072 # Allow ARC to grow to 30GB
zfs_kernel_parameters: {}

# ZFS Configuration.
# Run `zfs mount -a` during system start?
zfs_mount: true
# Run `zfs unmount -a` during system stop?
zfs_unmount: true
# By default, a verbatim import of all pools is performed at boot based on the
# contents of the default zpool cache file.  The contents of the cache are
# managed automatically by the 'zpool import' and 'zpool export' commands.
#
# By setting this to 'true', the system will instead search all devices for
# pools and attempt to import them all at boot, even those that have been
# exported.  Under this mode, the search path can be controlled by the
# ZPOOL_IMPORT_PATH variable and a list of pools that should not be imported
# can be listed in the ZFS_POOL_EXCEPTIONS variable.
#
# Note that importing all visible pools may include pools that you don't
# expect, such as those on removable devices and SANs, and those pools may
# proceed to mount themselves in places you do not want them to.  The results
# can be unpredictable and possibly dangerous.  Only enable this option if you
# understand this risk and have complete physical control over your system and
# SAN to prevent the insertion of malicious pools.
zpool_import_all_visible: false
# Specify specific path(s) to look for device nodes and/or links for the
# pool import(s). See zpool(8) for more information about this variable.
# It supersedes the old USE_DISK_BY_ID which indicated that it would only
# try '/dev/disk/by-id'.
# The old variable will still work in the code, but is deprecated.
zpool_import_path: ~
# List of pools that should NOT be imported at boot
# when ZPOOL_IMPORT_ALL_VISIBLE is 'true'.
zfs_pool_exceptions: ~
# Should the datasets be mounted verbosely?
# A mount counter will be used when mounting if set to 'true'.
zfs_verbose_mount: false
# Should we allow overlay mounts?
# This is standard in Linux, but not ZFS which comes from Solaris where this
# is not allowed).
zfs_do_overlay_mounts: false
# List any additional option to the 'zfs import' commandline.
# Include '-o' for each option wanted.
# You don't need to put '-f' in here, unless you want it ALL the time.
# Using the option 'zfsforce=1' on the grub/kernel command line will
# do the same, but on a case-to-case basis.
zpool_import_opts: ~
# Full path to the ZFS cache file?
# See "cachefile" in zpool(8).
# The default is "/etc/zfs/zpool.cache".
#
# Setting ZPOOL_CACHE to an empty string ('') AND setting ZPOOL_IMPORT_OPTS to
# "-c /etc/zfs/zpool.cache" will _enforce_ the use of a cache file.
# This is needed in some cases (extreme amounts of VDEVs, multipath etc).
# Generally, the use of a cache file is usually not recommended on Linux
# because it sometimes is more trouble than it's worth (laptops with external
# devices or when/if device nodes changes names).
zpool_cache: ~
# List additional option to the 'zfs mount' command line.
# Include '-o' for each option wanted.
zfs_mount_extra_options: ~
# Build kernel modules with the --enable-debug switch?
# Only applicable for Debian GNU/Linux {dkms,initramfs}.
zfs_dkms_enable_debug: false
# Build kernel modules with the --enable-debuginfo switch?
# Only applicable for Debian GNU/Linux {dkms,initramfs}.
zfs_dkms_enable_debuginfo: false
# Keep debugging symbols in kernel modules?
# Only applicable for Debian GNU/Linux {dkms,initramfs}.
zfs_dkms_disable_strip: false
# List of optional arguments for the ZFS Event Daemon (ZED).
# See zed(8) for more information on available options.
zed_args: ~

# ZED Configuration.
# Absolute path to the debug output file.
zfs_zed_debug_log: ~
# Email address of the zpool administrator for receipt of notifications;
#   multiple addresses can be specified if they are delimited by whitespace.
# Set to false or ~ to disable sending emails.
zfs_zed_email_addr: root
# Name or path of executable responsible for sending notifications via email;
#   the mail program must be capable of reading a message body from stdin.
zfs_zed_mail_prog: ~
# Command-line options for ZED_EMAIL_PROG.
# The string @ADDRESS@ will be replaced with the recipient email address(es).
# The string @SUBJECT@ will be replaced with the notification subject;
#   this should be protected with quotes to prevent word-splitting.
zfs_zed_email_opts: ~
# Default directory for zed lock files.
zfs_zed_lockdir: ~
# Minimum number of seconds between notifications for a similar event.
zfs_zed_notify_interval_secs: 3600
# Notification verbosity.
#   If set to 0, suppress notification if the pool is healthy.
#   If set to 1, send notification regardless of pool health.
zfs_zed_notify_verbose: ~
# Send notifications for 'ereport.fs.zfs.data' events.
# Set any truthy value to enable.
zfs_zed_notify_data: ~
# Pushbullet access token.
#   <https://www.pushbullet.com/my-channel>
# If not defined, push notifications will instead be sent to all devices
#   associated with the account specified by the access token.
zfs_zed_pushbullet_access_token: ~
# Pushbullet channel tag for push notification feeds that can be subscribed to.
#   <https://www.pushbullet.com/my-channel>
# If not defined, push notifications will instead be sent to all devices
#   associated with the account specified by the access token.
zfs_zed_pushbullet_channel_tag: ~
# Slack Webhook URL.
# This allows posting to the given channel and includes an access token.
#   <https://api.slack.com/incoming-webhooks>
zfs_zed_slack_webhook_url: ~
# Default directory for zed state files.
zfs_zed_rundir: ~
# Turn on/off enclosure LEDs when drives get DEGRADED/FAULTED.  This works for
# device mapper and multipath devices as well.  Your enclosure must be
# supported by the Linux SES driver for this to work.
zfs_zed_use_enclosure_leds: true
# Run a scrub after every resilver
# Disabled by default, 1 to enable and 0 to disable.
zfs_zed_scrub_after_resilver: ~
# The syslog priority (e.g., specified as a "facility.level" pair).
zfs_zed_syslog_priority: ~
# The syslog tag for marking zed events.
zfs_zed_syslog_tag: ~
# Which set of event subclasses to log
# By default, events from all subclasses are logged.
# If ZED_SYSLOG_SUBCLASS_INCLUDE is set, only subclasses
# matching the pattern are logged. Use shell wildcards (*, ?)
# to match multiple subclasses.
# Otherwise, if ZED_SYSLOG_SUBCLASS_EXCLUDE is set, the
# matching subclasses are excluded from logging.
zfs_zed_syslog_subclass_include: ~
zfs_zed_syslog_subclass_exclude:
  - history_event
# Use GUIDs instead of names when logging pool and vdevs
zfs_zed_syslog_display_guids: ~

# ZFS zpools to create.
#
# Example:
#
# zfs_pools:
#   bpool:
#     scrub: monthly
#     state: scrub
#   rpool:
#     scrub: weekly
#     state: scrub
#   spool:
#     type: raidz2
#     devices:
#       - /dev/disk/by-id/scsi-12351jkfsdfl
#       - /dev/disk/by-id/scsi-12tn23kt3laa
#       - /dev/disk/by-id/scsi-tyh082iynug3
#       - /dev/disk/by-id/scsi-8h2136n1313o
#     scrub: weekly
#     force: true
#     properties:
#       ashift: 12
#     filesystem_properties:
#       mountpoint: none
#       compression: lz4
#       relatime: on
#       xattr: sa
#     state: present
zfs_pools: {}

# ZFS Filesystems to create.
#
# Example:
#
# zfs_filesystems:
#   spool/data:
#     properties:
#       quota: 50G
#       compression: lz4
#       sharenfs: on
#     state: present
#   spool/data/iscsi-test:
#     properties:
#       volsize: 500G
#       shareiscsi: true
#     state: present
zfs_filesystems: {}
