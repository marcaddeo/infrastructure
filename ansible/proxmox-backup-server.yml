---
- name: Provision Proxmox Backup Servers
  hosts: proxmox_backup_servers
  become: true
  tasks:
    # - name: Add Proxmox GPG key
    #   get_url:
    #     url: https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg
    #     dest: /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
    #     mode: "0644"
    #
    # - name: Empty the /etc/apt/sources.list file
    #   copy:
    #     content: "# File intentionally left blank."
    #     dest: /etc/apt/sources.list
    #     mode: "0644"
    #
    # - name: Add apt repositories
    #   apt_repository:
    #     repo: "{{ item }}"
    #     update_cache: false
    #     state: present
    #   loop:
    #     - deb http://deb.debian.org/debian bookworm main contrib non-free-firmware
    #     - deb-src http://deb.debian.org/debian bookworm main contrib non-free-firmware
    #     - deb http://deb.debian.org/debian bookworm-updates main contrib non-free-firmware
    #     - deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free-firmware
    #     - deb http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware
    #     - deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free-firmware
    #     - deb http://download.proxmox.com/debian/pbs bookworm pbs-no-subscription
    #
    # - name: Remove enterprise Proxmox repository
    #   apt_repository:
    #     repo: "deb https://enterprise.proxmox.com/debian/pbs bookworm pbs-enterprise"
    #     update_cache: true
    #     state: absent
    #
    # - name: Install Proxmox Backup Server
    #   apt:
    #     name: proxmox-backup
    #     update_cache: true
    #     state: present
    #
    # - name: Remove subscription nag message
    #   lineinfile:
    #     path: /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js
    #     line: "        orig_cmd(); return;"
    #     insertafter: '^\s+checked_command: function\(orig_cmd\) {$'
    #     firstmatch: true
    #     backup: true
    #
    # - set_fact: # noqa: name[missing]
    #     pbs_root_password: "{{ pbs_root_password }}"
    #   no_log: true
    #
    # - name: Update root user password
    #   user:
    #     name: root
    #     password: "{{ pbs_root_password | password_hash('sha512', 65535 | random(seed=inventory_hostname) | string) }}"
    #   no_log: true
    #
    # - name: Get existing datastores
    #   command: proxmox-backup-manager datastore list --output-format json
    #   changed_when: false
    #   check_mode: false
    #   register: existing_datastores
    #   tags: pbs_datastores
    #
    # - set_fact: # noqa: name[missing]
    #     existing_datastore_names: "{{ existing_datastores.stdout_lines[0] | from_json | json_query('[*].name') }}"
    #   tags: pbs_datastores
    #
    # - set_fact: # noqa: name[missing]
    #     existing_datastores: "{{ existing_datastores.stdout_lines[0] | from_json }}"
    #   tags: pbs_datastores
    #
    # - name: Create missing datastores
    #   shell: >-
    #     proxmox-backup-manager datastore create {{ item.name }} {{ item.backing_path }}
    #     {% if item.comment is defined -%}
    #       --comment "{{ item.comment }}"
    #     {%- endif %}
    #     {% if item.gc_schedule is defined -%}
    #       --gc-schedule "{{ item.gc_schedule }}"
    #     {%- endif %}
    #     {% if item.prune_schedule is defined -%}
    #       --prune-schedule "{{ item.prune_schedule }}"
    #     {%- endif %}
    #     {% if item.prune_options.keep_last is defined -%}
    #       --keep-last {{ item.prune_options.keep_last }}
    #     {%- endif %}
    #     {% if item.prune_options.keep_hourly is defined -%}
    #       --keep-hourly {{ item.prune_options.keep_hourly }}
    #     {%- endif %}
    #     {% if item.prune_options.keep_daily is defined -%}
    #       --keep-daily {{ item.prune_options.keep_daily }}
    #     {%- endif %}
    #     {% if item.prune_options.keep_weekly is defined -%}
    #       --keep-weekly {{ item.prune_options.keep_weekly }}
    #     {%- endif %}
    #     {% if item.prune_options.keep_monthly is defined -%}
    #       --keep-monthly {{ item.prune_options.keep_monthly }}
    #     {%- endif %}
    #     {% if item.prune_options.keep_yearly is defined -%}
    #       --keep-yearly {{ item.prune_options.keep_yearly }}
    #     {%- endif %}
    #   loop: "{{ pbs_datastores }}"
    #   when: item.state == "present" and item.name not in existing_datastore_names
    #   changed_when: false
    #   tags: pbs_datastores
    #
    # - name: Updating existing datastores
    #   shell: >-
    #     proxmox-backup-manager datastore update {{ item.name }}
    #     {% if item.comment is defined -%}
    #       --comment "{{ item.comment }}"
    #     {%- endif %}
    #     {% if item.gc_schedule is defined -%}
    #       --gc-schedule "{{ item.gc_schedule }}"
    #     {%- endif %}
    #   loop: "{{ pbs_datastores }}"
    #   when: (item.state == "present" and item.name in existing_datastore_names)
    #     and (item.gc_schedule != (existing_datastores | selectattr('name', 'eq', item.name))[0]["gc-schedule"]
    #     or item.comment != (existing_datastores | selectattr('name', 'eq', item.name))[0].comment)
    #   changed_when: false
    #   tags: pbs_datastores

    # @TODO untested but should work lol
    - name: Get existing users
      command: proxmox-backup-manager user list --output-format json
      changed_when: false
      check_mode: false
      register: existing_users
      tags: pbs_users

    - set_fact: # noqa: name[missing]
        existing_user_names: "{{ existing_users.stdout_lines[0] | from_json | json_query('[*].name') }}"
      tags: pbs_users

    - set_fact: # noqa: name[missing]
        existing_users: "{{ existing_users.stdout_lines[0] | from_json | rejectattr('userid', 'eq', 'root@pam') }}"
      tags: pbs_users

    - name: Create missing users
      shell: >-
        proxmox-backup-manager user create {{ item.username }}
        {% if item.comment is defined -%}
          --comment "{{ item.comment }}"
        {%- endif %}
        {% if item.email is defined -%}
          --email "{{ item.email }}"
        {%- endif %}
        {% if item.enable is defined -%}
          --enable {{ item.enable | int }}
        {%- endif %}
        {% if item.expire is defined -%}
          --expire "{{ item.expire }}"
        {%- endif %}
        {% if item.firstname is defined -%}
          --firstname "{{ item.firstname }}"
        {%- endif %}
        {% if item.lastname is defined -%}
          --lastname "{{ item.lastname }}"
        {%- endif %}
        {% if item.password is defined -%}
          --password "{{ item.password }}"
        {%- endif %}
      loop: "{{ pbs_users }}"
      when: item.state == "present" and item.name not in existing_user_names
      no_log: true
      changed_when: false
      tags: pbs_users

    - name: Updating existing users
      shell: >-
        proxmox-backup-manager user update {{ item.username }}
        {% if item.comment is defined -%}
          --comment "{{ item.comment }}"
        {%- endif %}
        {% if item.email is defined -%}
          --email "{{ item.email }}"
        {%- endif %}
        {% if item.enable is defined -%}
          --enable {{ item.enable | int }}
        {%- endif %}
        {% if item.expire is defined -%}
          --expire "{{ item.expire }}"
        {%- endif %}
        {% if item.firstname is defined -%}
          --firstname "{{ item.firstname }}"
        {%- endif %}
        {% if item.lastname is defined -%}
          --lastname "{{ item.lastname }}"
        {%- endif %}
      loop: "{{ pbs_users }}"
      when: (item.state == "present" and item.name in existing_user_names)
        and (item.comment != (existing_users | selectattr('name', 'eq', item.name))[0].comment
        or item.email != (existing_users | selectattr('name', 'eq', item.name))[0].email
        or item.enable != (existing_users | selectattr('name', 'eq', item.name))[0].enable
        or item.expire != (existing_users | selectattr('name', 'eq', item.name))[0].expire
        or item.firstname != (existing_users | selectattr('name', 'eq', item.name))[0].firstname
        or item.lastname != (existing_users | selectattr('name', 'eq', item.name))[0].lastname)
      no_log: true
      changed_when: false
      tags: pbs_users

    # @TODO
    # - name: Add user access
    #   shell: >-
    #     proxmox-backup-manager acl update {{ item.path }} {{ item.role }} --auth-id {{ item.username }}
    #   loop: "{{ pbs_users }}"
    #   when: item.state == "present"
    #   no_log: true
    #   tags: pbs_users

    # @TODO
    # - name: Update prune schedules
