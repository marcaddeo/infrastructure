---
- hosts: bootstrap
  become: true
  collections:
    - community.general.zfs
  pre_tasks:
    - name: Merge server_users
      merge_vars:
        suffix_to_merge: server_users__to_merge
        merged_var_name: server_users
        expected_type: list
      tags: users
  tasks:
    - shell: zfs list bpool/boot/debian@bootstrap
      ignore_errors: true
      register: bpool_snapshot_status

    - shell: zfs list rpool/root/debian@bootstrap
      ignore_errors: true
      register: rpool_snapshot_status

    - meta: end_play
      when: >
        bpool_snapshot_status.rc == 0 and
        rpool_snapshot_status.rc == 0

    - stat:
        path: /home/user
      register: user_home

    - name: Unmount all filesystems on the Live CD environment
      shell: mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}
      when: user_home.stat.exists

    - name: Export all zpools
      command: zpool export -a
      when: user_home.stat.exists

    - name: Reboot the server
      reboot:
      when: user_home.stat.exists

    - name: Set up a grub preseed file to reconfigure grub
      copy:
        dest: /root/grub-preseed.txt
        content: |
          grub-pc grub2/force_efi_extra_removable boolean false
          grub-pc grub-pc/install_devices_failed boolean false
          grub-pc grub-pc/install_devices_empty boolean false
          grub-pc grub-pc/postrm_purge_boot_grub boolean false
          grub-pc grub-pc/install_devices_failed_upgrade boolean true
          grub-pc grub-pc/install_devices multiselect {{ bootstrap_zpool_disk_identifiers | join(', ') }}
          grub-pc grub2/update_nvram boolean true
          grub-pc grub-pc/timeout string 5
          grub-pc grub2/linux_cmdline string root=ZFS=rpool/root/debian
          grub-pc grub2/linux_cmdline_default string quiet
          grub-pc grub2/kfreebsd_cmdline_default string quiet
          grub-pc grub-pc/mixed_legacy_and_grub2 boolean true
          grub-pc grub-pc/hidden_timeout boolean false
          grub-pc grub-pc/install_devices_disks_changed multiselect
          grub-pc grub-pc/kopt_extracted boolean false
          grub-pc grub2/kfreebsd_cmdline string
          grub-pc grub-pc/chainload_from_menu.lst boolean true
      when: bootstrap_boot_type == 'bios'

    - name: Set selections with debconf
      shell: debconf-set-selections /root/grub-preseed.txt
      environment:
        DEBIAN_FRONTEND: noninteractive
        DEBCONF_NONINTERACTIVE_SEEN: true
      when: bootstrap_boot_type == 'bios'

    - name: Reconfigure packages with correct settings
      shell: dpkg-reconfigure grub-pc
      environment:
        DEBIAN_FRONTEND: noninteractive
        DEBCONF_NONINTERACTIVE_SEEN: true
      when: bootstrap_boot_type == 'bios'

    - shell: umount /boot/efi
      when: bootstrap_boot_type == 'uefi'

    - name: Mirror GRUB (UEFI)
      shell: >
        dd if={{ bootstrap_zpool_disk_identifiers | first }}-part2 of={{ item }}-part2 &&
        efibootmgr -c -g -d {{ item }} \
          -p 2 -L "debian-{{ 2 + index }}" -l '\EFI\debian\grubx64.efi'
      loop: "{{ bootstrap_zpool_disk_identifiers[1:] }}"
      loop_control:
        index_var: index
      when: bootstrap_boot_type == 'uefi' and (bootstrap_zpool_disk_identifiers | length > 1)

    - shell: mount /boot/efi
      when: bootstrap_boot_type == 'uefi'

    - shell: getconf PAGESIZE
      register: pagesize

    - name: Create a swap device
      zfs:
        name: rpool/swap
        state: present
        extra_zfs_properties:
          volsize: 4G
          volblocksize: "{{ pagesize.stdout }}"
          compression: zle
          logbias: throughput
          sync: always
          primarycache: metadata
          secondarycache: none
          "com.sun:auto-snapshot": false

    - name: Configure the swap device
      shell: mkswap -f /dev/zvol/rpool/swap

    - lineinfile:
        path: /etc/fstab
        line: /dev/zvol/rpool/swap none swap discard 0 0

    - lineinfile:
        path: /etc/initramfs-tools/conf.d/resume
        line: RESUME=none
        create: true

    - name: Enable the swap device
      shell: swapon -a

    - name: Upgrade the minimal system
      apt:
        upgrade: dist

    - name: Disable log compression
      shell: >
        for file in /etc/logrotate.d/* ; do
          if grep -Eq "(^|[^#y])compress" "$file" ; then
            sed -i -r "s/(^|[^#y])(compress)/\1#\2/" "$file"
          fi
        done

    - name: Final reboot
      reboot:

    - name: Create user home directory zfs datasets
      zfs:
        name: "rpool/home/{{ item.name }}"
        state: present
      loop: "{{ bootstrap_users }}"
      no_log: true

    - name: Create base users
      user:
        name: "{{ item.name }}"
        groups: "{{ item.groups }}"
        password: "{{ (item.password | default(bootstrap_users_default_password)) | password_hash('sha512', 'salt') }}"
        shell: /bin/bash
      loop: "{{ bootstrap_users }}"
      no_log: true

    - name: Copy user skeletons into place
      copy:
        src: /etc/skel/.
        dest: "/home/{{ item.name }}"
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        remote_src: true
      loop: "{{ bootstrap_users }}"
      no_log: true

    - name: Add authorized ssh keys for base users
      authorized_key:
        user: "{{ item.name }}"
        key: "{{ lookup('file', item.ssh_public_key_file) }}"
        state: present
      loop: "{{ bootstrap_users }}"
      when: item.ssh_public_key_file is defined
      no_log: true

    - name: Enable passwordless sudo for the sudo group
      lineinfile:
        dest: /etc/sudoers
        regexp: "^%sudo   ALL=(ALL:ALL) ALL$"
        line: "%sudo   ALL=(ALL:ALL) NOPASSWD: ALL"

    - name: Disable the root password
      shell: passwd -d root

    - name: Disable the root account
      shell: passwd -l root

    - name: Disable root SSH login
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: PermitRootLogin yes
        line: "#PermitRootLogin prohibit-password"

    - name: Clean up preseed files
      file:
        path: "/root/{{ item }}"
        state: absent
      loop:
        - preseed.txt
        - grub-preseed.txt
        - fix-filesystem-mounts.sh

    - name: Destroy @install snapshots
      zfs:
        name: "{{ item }}"
        state: absent
      loop:
        - bpool/boot/debian@install
        - rpool/root/debian@install

    - name: Create @bootstrap snapshots
      zfs:
        name: "{{ item }}"
        state: present
      loop:
        - bpool/boot/debian@bootstrap
        - rpool/root/debian@bootstrap

    - name: Restart ssh server
      systemd:
        name: ssh
        state: restarted

    - name: Ensure the host is removed from the bootstrap group
      local_action:
        module: ini_file
        path: "{{ inventory_file }}"
        allow_no_value: true
        section: bootstrap
        option: "{{ lookup('file', inventory_file) | regex_findall('^' ~ inventory_hostname ~ '.*$', multiline=True) | first }}"
        state: absent
      become: false
